---

- name: Build Operator in Kubernetes docker container
  hosts: k8s
  vars:
    image_name: etcd.database.coreos.com/etcd-ha-operator:testing
  tasks:
  # using command so we don't need to install any dependencies
  - name: Get existing image hash
    command: docker images -q {{image_name}}
    register: prev_hash
    changed_when: false

  - name: Build Operator Image
    command: docker build -f /build/build/Dockerfile -t {{ image_name }} /build
    register: build_cmd
    changed_when: not prev_hash.stdout or (prev_hash.stdout and prev_hash.stdout not in ''.join(build_cmd.stdout_lines[-2:]))

- name: Converge create etcd CR
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    pull_policy: Never
    REPLACE_IMAGE: etcd.database.coreos.com/etcd-ha-operator:testing
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir, 'cr.yaml'])) | from_yaml }}"
  tasks:
  - name: Delete the Operator Deployment
    k8s:
      state: absent
      namespace: '{{ namespace }}'
      definition: "{{ lookup('template', '/'.join([deploy_dir, 'test-operator.yaml'])) }}"
    register: delete_deployment
    when: hostvars[groups.k8s.0].build_cmd.changed

  - name: Wait 30s for Operator Deployment to terminate
    k8s_facts:
      api_version: '{{ definition.apiVersion }}'
      kind: '{{ definition.kind }}'
      namespace: '{{ namespace }}'
      name: '{{ definition.metadata.name }}'
    vars:
      definition: "{{ lookup('template', '/'.join([deploy_dir, 'test-operator.yaml'])) | from_yaml }}"
    register: deployment
    until: not deployment.resources
    delay: 3
    retries: 10
    when: delete_deployment.changed

  - name: Create the Operator Deployment
    k8s:
      namespace: '{{ namespace }}'
      definition: "{{ lookup('template', '/'.join([deploy_dir, 'test-operator.yaml'])) }}"

  - name: Create the etcd.database.coreos.com/v1beta3.EtcdCluster
    k8s:
      state: present
      namespace: '{{ namespace }}'
      definition: "{{ custom_resource }}"

  - name: Set CR fact
    k8s_facts:
      api_version: '{{ custom_resource.apiVersion }}'
      kind: '{{ custom_resource.kind }}'
      namespace: '{{ namespace }}'
      name: '{{ custom_resource.metadata.name }}'
    register: temp_cr

  - debug: var=temp_cr

  - name: Wait 100s for reconcilation to run
    k8s_facts:
      api_version: '{{ custom_resource.apiVersion }}'
      kind: '{{ custom_resource.kind }}'
      namespace: '{{ namespace }}'
      name: '{{ custom_resource.metadata.name }}'
    register: cr
    until:
    - "'Available' in (cr | json_query('resources[].status.phase'))"
    delay: 10
    retries: 50

  - name: set the assert state=present
    set_fact:
      state: present

# TODO: Add asserts for checking etcd-membership
# TODO: Add asserts for checking CR status
- import_playbook: '{{ playbook_dir }}/../default/asserts_kube_resources.yml'

- name: Converge delete etcd CR
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    pull_policy: Never
    REPLACE_IMAGE: etcd.database.coreos.com/etcd-ha-operator:testing
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir, 'cr.yaml'])) | from_yaml }}"
  tasks:
  - name: Make sure the etcd CR is available from previous tasks
    k8s_facts:
      api_version: '{{ custom_resource.apiVersion }}'
      kind: '{{ custom_resource.kind }}'
      namespace: '{{ namespace }}'
      name: '{{ custom_resource.metadata.name }}'
    register: cr
    until:
      - "'Available' in (cr | json_query('resources[].status.phase'))"
    delay: 10
    retries: 50

  - name: Delete the etcd.database.coreos.com/v1beta3.EtcdCluster
    k8s:
      state: absent
      namespace: '{{ namespace }}'
      definition: "{{ custom_resource }}"

  - name: set fact for delete CR
    set_fact:
      state: absent

- import_playbook: '{{ playbook_dir }}/../default/asserts_kube_resources.yml'

# TODO: Add scaling up
# TODO: Add scaling down
# TODO: Add TLS
